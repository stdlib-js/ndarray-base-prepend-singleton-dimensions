{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport getShape from '@stdlib/ndarray-base-shape';\nimport getStrides from '@stdlib/ndarray-base-strides';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getOrder from '@stdlib/ndarray-base-order';\nimport getData from '@stdlib/ndarray-base-data-buffer';\n\n\n// MAIN //\n\n/**\n* Returns an array with a specified number of prepended singleton dimensions.\n*\n* @param {ndarray} x - input array\n* @param {NonNegativeInteger} n - number of singleton dimensions to prepend\n* @returns {ndarray} output array\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = prependSingletonDimensions( x, 3 );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 1, 1, 1, 2, 2 ]\n*\n* var v = y.get( 0, 0, 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 0, 0, 0, 1, 0 );\n* // returns 3\n*\n* v = y.get( 0, 0, 0, 1, 1 );\n* // returns 4\n*/\nfunction prependSingletonDimensions( x, n ) { // eslint-disable-line id-length\n\tvar strides;\n\tvar shape;\n\tvar sh;\n\tvar st;\n\tvar N;\n\tvar i;\n\n\tsh = getShape( x, false );\n\tst = getStrides( x, false );\n\tN = sh.length;\n\n\tstrides = [];\n\tshape = [];\n\n\t// Prepend singleton dimensions...\n\tfor ( i = 0; i < n; i++ ) {\n\t\tshape.push( 1 );\n\t\tstrides.push( st[ 0 ] );\n\t}\n\t// Copy remaining dimensions...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tshape.push( sh[ i ] );\n\t\tstrides.push( st[ i ] );\n\t}\n\tif ( isReadOnly( x ) ) {\n\t\t// If provided a read-only view, the returned array should also be read-only...\n\t\treturn new x.constructor( getDType( x ), getData( x ), shape, strides, getOffset( x ), getOrder( x ), { // eslint-disable-line max-len\n\t\t\t'readonly': true\n\t\t});\n\t}\n\treturn new x.constructor( getDType( x ), getData( x ), shape, strides, getOffset( x ), getOrder( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default prependSingletonDimensions;\n"],"names":["prependSingletonDimensions","x","n","strides","shape","sh","st","N","i","getShape","getStrides","length","push","isReadOnly","constructor","getDType","getData","getOffset","getOrder","readonly"],"mappings":";;wnBAmEA,SAASA,EAA4BC,EAAGC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAUJ,IARAH,EAAKI,EAAUR,GAAG,GAClBK,EAAKI,EAAYT,GAAG,GACpBM,EAAIF,EAAGM,OAEPR,EAAU,GACVC,EAAQ,GAGFI,EAAI,EAAGA,EAAIN,EAAGM,IACnBJ,EAAMQ,KAAM,GACZT,EAAQS,KAAMN,EAAI,IAGnB,IAAME,EAAI,EAAGA,EAAID,EAAGC,IACnBJ,EAAMQ,KAAMP,EAAIG,IAChBL,EAAQS,KAAMN,EAAIE,IAEnB,OAAKK,EAAYZ,GAET,IAAIA,EAAEa,YAAaC,EAAUd,GAAKe,EAASf,GAAKG,EAAOD,EAASc,EAAWhB,GAAKiB,EAAUjB,GAAK,CACrGkB,UAAY,IAGP,IAAIlB,EAAEa,YAAaC,EAAUd,GAAKe,EAASf,GAAKG,EAAOD,EAASc,EAAWhB,GAAKiB,EAAUjB,GAClG"}